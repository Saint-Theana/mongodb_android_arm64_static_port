# Copyright (C) 2021-present MongoDB, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the Server Side Public License, version 1,
# as published by MongoDB, Inc.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# Server Side Public License for more details.
#
# You should have received a copy of the Server Side Public License
# along with this program. If not, see
# <http://www.mongodb.com/licensing/server-side-public-license>.
#
# As a special exception, the copyright holders give permission to link the
# code of portions of this program with the OpenSSL library under certain
# conditions as described in each individual source file and distribute
# linked combinations including the program with the OpenSSL library. You
# must comply with the Server Side Public License in all respects for
# all of the code used other than as permitted herein. If you modify file(s)
# with this exception, you may extend this exception to your version of the
# file(s), but you are not obligated to do so. If you do not wish to do so,
# delete this exception statement from your version. If you delete this
# exception statement from all source files in the program, then also delete
# it in the license file.
#

global:
    cpp_namespace: "mongo"

imports:
    - "mongo/idl/basic_types.idl"
    - "../buildscripts/idl/tests/compatibility_test_pass/old/imports.idl"

types:
    intStringToInt:
        bson_serialization_type:
                                - int
                                - string
        description: "The bson_serialization_type changes from [int, string] in the old command's
                      reply field type to int in the new command's reply field type"
        cpp_type: "std::int32_t"
    
    intStringBoolToIntString:
        bson_serialization_type:
                                - int
                                - string
                                - bool
        description: "The bson_serialization_type changes from [int, string, bool] in the old
                      command's reply field type to [int, string] in the new command's reply
                      field type"
        cpp_type: "std::int32_t"
    
    intStringToIntStringBool:
        bson_serialization_type:
                                - int
                                - string
        description: "The bson_serialization_type changes from [int, string] in the old command's
                      reply field type to [int, string, bool] in the new command's reply field
                      type"
        cpp_type: "std::int32_t"

    intToIntString:
        bson_serialization_type:
                                - int
        description: "The bson_serialization_type changes from [int] in the old command
                      parameter's type to [int, string] in the new command parameter's type"
        cpp_type: "std::int32_t"

    bsonSerializationTypeAnyAllowed:
        bson_serialization_type:
                                - int
                                - any
        description: "The bson_serialization_type contains 'any'"
        cpp_type: "std::int32_t"

enums:
    NewReplyFieldEnumSubset:
        description: "The new reply type is an enum that is a subset of the old reply type's
                      enum values"
        type: string
        values:
            valueOne: "one"
            valueTwo: "two"
            valueThree: "three"
    
    EnumSuperset:
        description: "The new enum is a superset of the old enum values"
        type: string
        values:
            valueOne: "one"
            valueTwo: "two"

structs:
    StableNewFieldReply:
        description: "This reply contains a field that is unstable in the old command but is
                      stable in the new command."
        fields:
            stableNewField:
                type: string
                unstable: true

    RequiredNewFieldReply:
        description: "This reply contains a field that is optional in the old command but is
                      required in the new command."
        fields:
            requiredNewField:
                type: string
                optional: true
    
    OptionalNewField:
        description: "This struct contains a field that is required in the old command but is
                      optional in the new command."
        fields:
            optionalNewField:
                type: string
    
    AddedNewFieldReply:
        description: "This reply contains a field that is added in the new command."
    
    UnstableOldFieldReply:
        description: "This reply contains a field that is unstable in the old command and is
                      unstable and optional in the new command."
        fields:
            unstableOldField:
                type: string
                unstable: true

    EnumSubsetReply:
        description: "This reply contains an enum field where the new enum values is a subset
                      of the old reply type's enum values"
        fields:
            replyField:
                type: NewReplyFieldEnumSubset
    
    BsonSubsetReply:
        description: "This reply contains a field type where the new bson_serialization_type
                      is a subset of the old bson_serialization_type"
        fields:
            bsonSubsetReplyField:
                type: intStringToInt
    
    BsonSubsetReplyTwo:
        description: "This reply contains a field type where the new bson_serialization_type
                      is a subset of the old bson_serialization_type"
        fields:
            bsonSubsetReplyFieldTwo:
                type: intStringBoolToIntString

    StructFieldTypeRecursiveReplyOne:
        description: "This reply contains a field whose new type is a struct that is 
                      compatible with the old field type"
        fields:
            structReplyField:
                type: StableNewFieldReply
    
    StructFieldTypeRecursiveReplyTwo:
        description: "This reply contains a field whose new type is a struct that is 
                      compatible with the old field type"
        fields:
            structReplyField:
                type: StructType

    StructType:
        description: "This struct contains a field whose new type is compatible with the 
                      old field type"
        fields:
            fieldOne:
                type: BsonSubsetReply
    
    OldVariantTypeReply:
        description: "This reply contains an old field that has a variant type while the new field
                      is not a variant type"
        fields:
            oldVariantTypeReplyField:
                type: 
                    variant: [int, string, array<string>]

    NewVariantSubsetReply:
        description: "This reply contains a field whose new variant types are a subset
                      of the old variant types"
        fields:
            variantSubsetReplyField:
                type: 
                    variant: [int, bool, string, array<string>]

    NewVariantSubsetReplyTwo:
        description: "This reply contains a field whose new variant types are a subset
                      of the old variant types"
        fields:
            variantSubsetReplyFieldTwo:
                type: 
                    variant: [int, string, bool, double, array<string>]
    
    VariantRecursiveReply:
        description: "This reply contains a field that has a new variant type that is compatible
                      with the old variant type"
        fields:
            variantRecursiveReplyField:
                type: 
                    variant: [int, intStringBoolToIntString,
                              array<intStringBoolToIntString>, array<string>]
    
    OldVariantStructReply:
        description: "This reply contains a field whose new variant type does not have a variant
                      struct type while the old one does"
        fields:
            variantStructReplyField:
                type: 
                    variant: [int, string, StructType, array<StructType>, array<string>]
    
    VariantStructRecursiveReply:
        description: "This reply contains a field that has a new variant struct type that is
                      compatible with the old variant struct type"
        fields:
            variantStructRecursiveReplyField:
                type: 
                    variant: [int, StructFieldTypeRecursiveReplyTwo,
                              array<StructFieldTypeRecursiveReplyTwo>, array<string>]

    NewCommandParameterStruct:
        description: "The new command parameter's type and the
                     old command parameter's type are both structs"

    CommandParamStructRecursiveOne:
        description: "This command parameter struct type contains a unstable field while the
                      new struct field is stable and optional"
        fields:
            unstableToStableOptionalField:
                type: string
                unstable: true

    CommandParamStructRecursiveTwo:
        description: "This command parameter struct type contains a field whose new type is
                      a superset of the old field type"
        fields:
            supersetField:
                type: intToIntString

    OldValidatorStruct:
        description: "This struct contains a field where the old version contains a validator while
                      the new version does not"
        fields:
            oldValidatorField:
                type: int
                validator:
                    lt: 0

    ValidatorsEqualStruct:
        description: "This struct contains a field where the new and old validator are exactly equal"
        fields:
            validatorsEqualField:
                type: double
                validator:
                    lt: 0.0
                    gt: -1.1
                    lte: 2.0
                    gte: -2.98
                    callback: "callback"

    AddedOptionalTypeFieldStruct:
        description: "This struct contains a field that is added and optional in the new version"

    StableOptionalTypeFieldStruct:
        description: "This struct contains a field that is stable and optional in the new version
                      but unstable in the corresponding old version"
        fields:
            stableOptionalTypeField:
                type: string
                unstable: true

    StableWithDefaultTypeFieldStruct:
        description: "This struct contains a field that is stable and required with a default value
                      in the new version but unstable in the corresponding old version"
        fields:
            stableWithDefaultTypeField:
                type: string
                unstable: true

    RemovedUnstableTypeFieldStruct:
        description: "This struct contains a field that is unstable in the old version and
                      is removed in the new version"
        fields:
            removedUnstableTypeField:
                type: string
                unstable: true

    AddedUnstableTypeFieldStruct:
        description: "This struct contains a field that is added and unstable in the new version"

    KeptUnstableTypeFieldStruct:
        description: "This struct contains a field that is unstable in the new version and also
                      exists in the old version"
        fields:
            keptUnstableTypeField:
                type: string
                unstable: true
    StructCommandParameterTypeRecursive:
        description: "This param struct type contains a field that is compatible between the
                      old and new versions"
        fields:
            structCommandParameterTypeRecursiveField:
                type: intStringToIntStringBool

    VariantSupersetStruct:
        description: "This struct contains a field where the new variant types are a superset
                      of the old variant types"
        fields:
            variantSupersetField:
                type: 
                    variant: [int, bool, array<string>]

    VariantSupersetStructTwo:
        description: "This struct contains a field where the new variant types are a superset
                      of the old variant types"
        fields:
            variantSupersetFieldTwo:
                type: 
                    variant: [int, bool, array<string>]

    OldTypeNotVariantStruct:
        description: "This struct contains a field where the new type is variant while the
                      old one is not"
        fields:
            variantField:
                type: int

    VariantRecursiveStruct:
        description: "This struct contains a field where the new variant types are
                      compatible with the old variant types"
        fields:
            variantRecursiveField:
                type: 
                    variant: [int, intStringToIntStringBool,
                              array<intStringToIntStringBool>, array<string>]

    VariantStructSupersetStruct:
        description: "This struct contains a field where the new variant types contains a struct
                      while the old one does not"
        fields:
            variantStructSupersetField:
                type: 
                    variant: [int, string, NewCommandParameterStruct,
                              array<NewCommandParameterStruct>, array<string>]

    VariantStructRecursiveStruct:
        description: "This struct contains a field where the old variant struct and the new
                      variant struct are compatible"
        fields:
            variantStructRecursiveField:
                type:
                    variant: [int, string, StructCommandParameterTypeRecursive,
                              array<StructCommandParameterTypeRecursive>, array<string>]

    BsonSerializationTypeAnyReply:
        description: "This reply contains a field whose type is 'any' and is explicitly allowed"
        fields:
            anyTypeField:
                type: bsonSerializationTypeAnyAllowed

    NewlyAddedBsonSerializationTypeAnyReply:
        description: "This reply contains a newly added field whose type has a bson_serialization_type
                        that contains 'any' that is explicitly allowed"

    OldUnstableTypeChangesReply:
        description: "This reply contains a field that is unstable in the old version and has type changes"
        fields:
            oldUnstableTypeChangesReplyField:
                unstable: true
                type: intStringToIntStringBool

    NewlyAddedBsonSerializationTypeAnyStruct:
        description: "This struct contains a newly added field whose type has a bson_serialization_type
                        that contains 'any' that is explicitly allowed"

    OldUnstableTypeChangesStruct:
        description: "This struct contains a field that is unstable in the old version and has type changes"
        fields:
            oldUnstableTypeChangesField:
                unstable: true
                type: intStringBoolToIntString

    BsonSerializationTypeAnyWithVariantReply:
        description: "This reply contains a new reply field with variant types where one of the
                      bson serialization types is 'any' and is explicitly allowed"
        fields:
            anyTypeField:
                type:
                    variant: [intStringBoolToIntString, 
                              bsonSerializationTypeAnyAllowed,
                              StructFieldTypeRecursiveReplyTwo,
                              array<intStringBoolToIntString>,
                              array<bsonSerializationTypeAnyAllowed>, 
                              array<StructFieldTypeRecursiveReplyTwo>]

    ArrayTypeStruct:
        description: "Struct with ArrayType field."
        fields:
            ArrayCommandParameter:
                type: array<string>

commands:
    testCommand:
        description: "old passing test command"
        command_name: testCommand
        namespace: ignored
        cpp_name: testCommand
        strict: true
        api_version: "1"
        reply_type: OkReply

    removedCommandNotInAPIV1:
        description: "removing a command not in API v1 passes"
        command_name: removedCommandNotInAPIV1
        namespace: ignored
        cpp_name: removedCommandNotInAPIV1
        strict: true
        api_version: ""
        reply_type: OkReply

    strictFalseCommand:
        description: "command passes with strict: false in both versions of the command"
        command_name: strictFalseCommand
        namespace: ignored
        cpp_name: strictFalseCommand
        strict: false
        api_version: "1"
        reply_type: OkReply

    strictTrueToFalseCommand:
        description: "command passes when it switches from strict: true to switch: false"
        command_name: strictTrueToFalseCommand
        namespace: ignored
        cpp_name: strictTrueToFalseCommand
        strict: true
        api_version: "1"
        reply_type: OkReply
    
    addedCommandParameter:
        description: "new optional command parameter is added and should pass"
        command_name: addedCommandParameter
        namespace: ignored
        cpp_name: addedCommandParameter
        strict: true
        api_version: "1"
        reply_type: OkReply

    addedCommandParameterStable:
        description: "new command has an optional stable parameter that is unstable
                      in the corresponding old command and still passes"
        command_name: addedCommandParameterStable
        namespace: ignored
        cpp_name: addedCommandParameterStable
        strict: true
        api_version: "1"
        reply_type: OkReply
        fields:
            newOptionalStableParam:
                type: string
                unstable: true

    addedCommandParameterStableWithDefault:
        description: "new command has a required stable parameter with a default value
                      that is unstable in the corresponding old command and still passes"
        command_name: addedCommandParameterStableWithDefault
        namespace: ignored
        cpp_name: addedCommandParameterStableWithDefault
        strict: true
        api_version: "1"
        reply_type: OkReply
        fields:
            newStableParamWithDefault:
                type: string
                unstable: true

    removeCommandParameterUnstable:
        description: "new command removes parameter that is unstable
                      in the corresponding old command and still passes"
        command_name: removeCommandParameterUnstable
        namespace: ignored
        cpp_name: removeCommandParameterUnstable
        strict: true
        api_version: "1"
        reply_type: OkReply
        fields:
            unstableParamToRemove:
                type: string
                unstable: true

    addedCommandParameterOptional:
        description: "new command has an optional parameter that is required
                      in the corresponding old command and still passes"
        command_name: addedCommandParameterOptional
        namespace: ignored
        cpp_name: addedCommandParameterOptional
        strict: true
        api_version: "1"
        reply_type: OkReply
        fields:
            newOptionalParam:
                type: string
                optional: false

    addedUnstableCommandParameter:
        description: "new command has a new unstable parameter that does not
                      exist in the corresponding old command and still passes"
        command_name: addedUnstableCommandParameter
        namespace: ignored
        cpp_name: addedUnstableCommandParameter
        strict: true
        api_version: "1"
        reply_type: OkReply

    keptUnstableCommandParameter:
        description: "new command has an unstable parameter that also
                      exists in the corresponding old command and still passes"
        command_name: keptUnstableCommandParameter
        namespace: ignored
        cpp_name: keptUnstableCommandParameter
        strict: true
        api_version: "1"
        reply_type: OkReply
        fields:
            unstableParam:
                type: string
                unstable: true

    newCommandParameterType:
        description: "new command passes because its command parameter type is compatible with
                     the corresponding old command's parameter type"
        command_name: newCommandParameterType
        namespace: ignored
        cpp_name: newCommandParameterType
        strict: true
        api_version: "1"
        reply_type: OkReply
        fields:
            compatibleParameter:
                type: string

    newCommandParameterTypeEnumSuperset:
        description: "new command passes because its command parameter type is an enum that is
                      a superset of the corresponding old command parameter's type's enum values"
        command_name: newCommandParameterTypeEnumSuperset
        namespace: ignored
        cpp_name: newCommandParameterTypeEnumSuperset
        strict: true
        api_version: "1"
        reply_type: OkReply
        fields:
            parameterEnumSuperset:
                type: EnumSuperset

    newCommandParameterTypeStruct:
        description: "new command passes because its command parameter type is a struct and the
                      corresponding old command parameter type is also a struct"
        command_name: newCommandParameterTypeStruct
        namespace: ignored
        cpp_name: newCommandParameterTypeStruct
        strict: true
        api_version: "1"
        reply_type: OkReply
        fields:
            parameterStruct:
                type: NewCommandParameterStruct

    newCommandParameterTypeBsonSuperset:
        description: "new command passes because its parameter type has a bson_serialization_type
                      that is a superset of the corresponding old command parameter type's
                      bson_serialization_type"
        command_name: newCommandParameterTypeBsonSuperset
        namespace: ignored
        cpp_name: newCommandParameterTypeBsonSuperset
        strict: true
        api_version: "1"
        reply_type: OkReply
        fields:
            bsonSupersetParam:
                type: intToIntString

    newCommandParameterTypeStructRecursiveOne:
        description: "new command passes because its parameter type is a struct that is
                      compatible with the old parameter type struct"
        command_name: newCommandParameterTypeStructRecursiveOne
        namespace: ignored
        cpp_name: newCommandParameterTypeStructRecursiveOne
        strict: true
        api_version: "1"
        reply_type: OkReply
        fields:
            unstableToStableOptionalStructParameter:
                type: CommandParamStructRecursiveOne

    newCommandParameterTypeStructRecursiveTwo:
        description: "new command passes because its parameter type is a struct that is
                      compatible with the old parameter type struct"
        command_name: newCommandParameterTypeStructRecursiveTwo
        namespace: ignored
        cpp_name: newCommandParameterTypeStructRecursiveTwo
        strict: true
        api_version: "1"
        reply_type: OkReply
        fields:
            supersetStructParameter:
                type: CommandParamStructRecursiveTwo

    newlyAddedParamBsonAnyAllowList:
        description: "command passes when its parameter is newly added and has bson type 'any'
                      that is explicitly allowed"
        command_name: newlyAddedParamBsonAnyAllowList
        namespace: ignored
        cpp_name: newlyAddedParamBsonAnyAllowList
        strict: true
        api_version: "1"
        reply_type: OkReply

    oldUnstableParamTypeChanges:
        description: "command passes when it has an old unstable param with incompatible type changes"
        command_name: oldUnstableParamTypeChanges
        namespace: ignored
        cpp_name: oldUnstableParamTypeChanges
        strict: true
        api_version: "1"
        reply_type: OkReply
        fields:
            oldUnstableTypeChangesParam:
                type: intStringBoolToIntString
                unstable: true

    newlyAddedTypeFieldBsonAnyAllowList:
        description: "command passes when its type field is newly added and has bson type 'any'
                      that is explicitly allowed"
        command_name: newlyAddedTypeFieldBsonAnyAllowList
        namespace: type
        type: NewlyAddedBsonSerializationTypeAnyStruct
        cpp_name: newlyAddedTypeFieldBsonAnyAllowList
        strict: true
        api_version: "1"
        reply_type: OkReply

    oldUnstableTypeChanges:
        description: "command passes when it has an old unstable type field with incompatible type changes"
        command_name: oldUnstableTypeChanges
        namespace: type
        type: OldUnstableTypeChangesStruct
        cpp_name: oldUnstableParamTypeChanges
        strict: true
        api_version: "1"
        reply_type: OkReply

    oldCommandParameterValidator:
        description: "new command passes when it contains a parameter that does not contain a validator
                      that is present in the old parameter"
        command_name: oldCommandParameterValidator
        namespace: ignored
        cpp_name: oldCommandParameterValidator
        strict: true
        api_version: "1"
        reply_type: OkReply
        fields:
            newParam:
                type: int
                validator:
                    lt: 0

    commandParameterValidatorsEqual:
        description: "new command passes because it contains a parameter that contains a validator
                      that is exactly equal to the old parameter validator"
        command_name: commandParameterValidatorsEqual
        namespace: ignored
        cpp_name: commandParameterValidatorsEqual
        strict: true
        api_version: "1"
        reply_type: OkReply
        fields:
            newParam:
                type: double
                validator:
                    lt: 0.0
                    gt: -1.1
                    lte: 2.0
                    gte: -2.98
                    callback: "callback"

    oldCommandTypeValidator:
        description: "new command passes because it contains a type that does not contain a validator
                      that is present in the old type"
        command_name: oldCommandTypeValidator
        namespace: type
        type: OldValidatorStruct
        cpp_name: oldCommandTypeValidator
        strict: true
        api_version: "1"
        reply_type: OkReply

    commandTypeValidatorsEqual:
        description: "new command passes because it contains a type that contains a validator
                      that is exactly equal to the old type validator"
        command_name: commandTypeValidatorsEqual
        namespace: type
        type: ValidatorsEqualStruct
        cpp_name: commandTypeValidatorsEqual
        strict: true
        api_version: "1"
        reply_type: OkReply

    newReplyFieldStable:
        description: "new command contains a stable reply field that is unstable
                      in the corresponding old command and still passes"
        command_name: newReplyFieldStable
        namespace: ignored
        cpp_name: newReplyFieldStable
        strict: true
        api_version: "1"
        reply_type: StableNewFieldReply
    
    newReplyFieldRequired:
        description: "new command contains a required reply field that is optional
                      in the corresponding old command and still passes"
        command_name: newReplyFieldRequired
        namespace: ignored
        cpp_name: newReplyFieldRequired
        strict: true
        api_version: "1"
        reply_type: RequiredNewFieldReply

    newReplyFieldAdded:
        description: "new command adds a new reply field and still passes"
        command_name: newReplyFieldAdded
        namespace: ignored
        cpp_name: newReplyFieldAdded
        strict: true
        api_version: "1"
        reply_type: AddedNewFieldReply
    
    oldReplyFieldUnstable:
        description: "old reply field is unstable so new commmand passes even if its new reply
                      field is unstable"
        command_name: oldReplyFieldUnstable
        namespace: ignored
        cpp_name: oldReplyFieldUnstable
        strict: true
        api_version: "1"
        reply_type: UnstableOldFieldReply

    importedReplyCommand:
        description: "reply is imported"
        command_name: importedReplyCommand
        namespace: ignored
        cpp_name: importedReplyCommand
        strict: true
        api_version: "1"
        reply_type: ImportedStableNewFieldReply

    newReplyFieldTypeEnumSubset:
        description: "new command passes because its reply field type is an enum that is
                      a subset of the corresponding old reply field type's enum values"
        command_name: newReplyFieldTypeEnumSubset
        namespace: ignored
        cpp_name: newReplyFieldTypeEnumSubset
        strict: true
        api_version: "1"
        reply_type: EnumSubsetReply

    newReplyFieldTypeBsonSubset:
        description: "new command passes because its reply field type has a
                      bson_serialization_type that is a subset of the corresponding
                      old reply field type's bson_serialization_type"
        command_name: newReplyFieldTypeBsonSubset
        namespace: ignored
        cpp_name: newReplyFieldTypeBsonSubset
        strict: true
        api_version: "1"
        reply_type: BsonSubsetReply

    newReplyFieldTypeBsonSubsetTwo:
        description: "new command passes because its reply field type has a
                      bson_serialization_type that is a subset of the corresponding
                      old reply field type's bson_serialization_type"
        command_name: newReplyFieldTypeBsonSubsetTwo
        namespace: ignored
        cpp_name: newReplyFieldTypeBsonSubsetTwo
        strict: true
        api_version: "1"
        reply_type: BsonSubsetReplyTwo

    newReplyFieldTypeStructRecursiveOne:
        description: "new command passes because its reply field type is a struct that is
                      compatible with the old reply field type struct"
        command_name: newReplyFieldTypeStructRecursiveOne
        namespace: ignored
        cpp_name: newReplyFieldTypeStructRecursiveOne
        strict: true
        api_version: "1"
        reply_type: StructFieldTypeRecursiveReplyOne

    newReplyFieldTypeStructRecursiveTwo:
        description: "new command passes because its reply field type is a struct that is
                      compatible with the old reply field type struct"
        command_name: newReplyFieldTypeStructRecursiveTwo
        namespace: ignored
        cpp_name: newReplyFieldTypeStructRecursiveTwo
        strict: true
        api_version: "1"
        reply_type: StructFieldTypeRecursiveReplyTwo

    newNamespaceIgnored:
        description: "new command passes when its namespace is changed to ignored"
        command_name: newNamespaceIgnored
        namespace: concatenate_with_db_or_uuid
        cpp_name: newNamespaceIgnored
        strict: true
        api_version: "1"
        reply_type: OkReply

    newNamespaceConcatenateWithDbOrUuid:
        description: "new command passes when its namespace is changed to
                      concatenate_with_db_or_uuid from concatenate_with_db"
        command_name: newNamespaceConcatenateWithDbOrUuid
        namespace: concatenate_with_db
        cpp_name: newNamespaceConcatenateWithDbOrUuid
        strict: true
        api_version: "1"
        reply_type: OkReply

    newNamespaceTypeToIgnored:
        description: "new command passes when its namespace is changed from type to ignored"
        command_name: newNamespaceTypeToIgnored
        namespace: type
        type: string
        cpp_name: newNamespaceTypeToIgnored
        strict: true
        api_version: "1"
        reply_type: OkReply

    oldNamespaceTypeNamespaceString:
        description: "If old command has namespace: type and type: namespacestring,
                      the new namespace can be changed to concatenate_with_db"
        command_name: oldNamespaceTypeNamespaceString
        namespace: type
        type: namespacestring
        cpp_name: oldNamespaceTypeNamespaceString
        strict: true
        api_version: "1"
        reply_type: OkReply

    oldNamespaceTypeNamespaceStringTwo:
        description: "If old command has namespace: type and type: namespacestring,
                      the new namespace can be changed to concatenate_with_db_or_uuid"
        command_name: oldNamespaceTypeNamespaceStringTwo
        namespace: type
        type: namespacestring
        cpp_name: oldNamespaceTypeNamespaceStringTwo
        strict: true
        api_version: "1"
        reply_type: OkReply

    newTypeSuperset:
        description: "new command passes because its type is a superset
                      of the old type"
        command_name: newTypeSuperset
        namespace: type
        type: intStringToIntStringBool
        cpp_name: newTypeSuperset
        strict: true
        api_version: "1"
        reply_type: OkReply

    newTypeEnumSuperset:
        description: "new command passes because its type is an enum that is
                      a superset of the corresponding old type's enum values"
        command_name: newTypeEnumSuperset
        namespace: type
        type: EnumSuperset
        cpp_name: newTypeEnumSuperset
        strict: true
        api_version: "1"
        reply_type: OkReply

    newTypeFieldOptional:
        description: "new command type contains an optional field that is required
                      in the corresponding old command and still passes"
        command_name: newTypeFieldOptional
        namespace: type
        type: OptionalNewField
        cpp_name: newTypeFieldOptional
        strict: true
        api_version: "1"
        reply_type: OkReply

    newTypeFieldAddedOptional:
        description: "new optional type field is added and should pass"
        command_name: newTypeFieldAddedOptional
        namespace: type
        type: AddedOptionalTypeFieldStruct
        cpp_name: newTypeFieldAddedOptional
        strict: true
        api_version: "1"
        reply_type: OkReply

    newTypeFieldStableOptional:
        description: "new command has an optional type field that is unstable
                      in the corresponding old command and still passes"
        command_name: newTypeFieldStableOptional
        namespace: type
        type: StableOptionalTypeFieldStruct
        cpp_name: newTypeFieldStableOptional
        strict: true
        api_version: "1"
        reply_type: OkReply

    newTypeFieldStableWithDefault:
        description: "new command has a required type field with a default value
                      that is unstable in the corresponding old command and still passes"
        command_name: newTypeFieldStableWithDefault
        namespace: type
        type: StableWithDefaultTypeFieldStruct
        cpp_name: newTypeFieldStableWithDefault
        strict: true
        api_version: "1"
        reply_type: OkReply

    removeTypeFieldUnstable:
        description: "new command removes type field that is unstable
                      in the corresponding old command and still passes"
        command_name: removeTypeFieldUnstable
        namespace: type
        type: RemovedUnstableTypeFieldStruct
        cpp_name: removeTypeFieldUnstable
        strict: true
        api_version: "1"
        reply_type: OkReply

    addedUnstableTypeField:
        description: "new command has a new unstable type field that does not
                      exist in the corresponding old command and still passes"
        command_name: addedUnstableTypeField
        namespace: type
        type: AddedUnstableTypeFieldStruct
        cpp_name: addedUnstableTypeField
        strict: true
        api_version: "1"
        reply_type: OkReply

    keptUnstableTypeField:
        description: "new command has an unstable type field that also
                      exists in the corresponding old command and still passes"
        command_name: keptUnstableTypeField
        namespace: type
        type: KeptUnstableTypeFieldStruct
        cpp_name: keptUnstableTypeField
        strict: true
        api_version: "1"
        reply_type: OkReply

    oldReplyFieldVariantType:
        description: "new command passes when its reply field type is not a variant type while
                      the old reply field is a variant type"
        command_name: oldReplyFieldVariantType
        namespace: ignored
        cpp_name: oldReplyFieldVariantType
        strict: true
        api_version: "1"
        reply_type: OldVariantTypeReply
    
    newReplyFieldVariantSubset:
        description: "new command when its reply field type is a variant type that is
                      a subset of the old reply field variant types"
        command_name: newReplyFieldVariantSubset
        namespace: ignored
        cpp_name: newReplyFieldVariantSubset
        strict: true
        api_version: "1"
        reply_type: NewVariantSubsetReply

    newReplyFieldVariantSubsetTwo:
        description: "new command when its reply field type is a variant type that is
                      a subset of the old reply field variant types"
        command_name: newReplyFieldVariantSubsetTwo
        namespace: ignored
        cpp_name: newReplyFieldVariantSubsetTwo
        strict: true
        api_version: "1"
        reply_type: NewVariantSubsetReplyTwo

    replyFieldVariantRecursive:
        description: "new command passes when its reply field type is a variant type that is
                      compatible with the old reply field variant type"
        command_name: replyFieldVariantRecursive
        namespace: ignored
        cpp_name: replyFieldVariantRecursive
        strict: true
        api_version: "1"
        reply_type: VariantRecursiveReply
    
    oldReplyFieldVariantStruct:
        description: "new command passes if it doesn't have a variant struct type while the
                      old command does"
        command_name: oldReplyFieldVariantStruct
        namespace: ignored
        cpp_name: oldReplyFieldVariantStruct
        strict: true
        api_version: "1"
        reply_type: OldVariantStructReply

    replyFieldVariantStructRecursive:
        description: "new command passes when its reply field type has a variant struct type
                      that is compatible with the old reply field variant struct type"
        command_name: replyFieldVariantStructRecursive
        namespace: ignored
        cpp_name: replyFieldVariantStructRecursive
        strict: true
        api_version: "1"
        reply_type: VariantStructRecursiveReply

    newlyAddedReplyFieldTypeBsonAnyAllowed:
        description: "command passes because it has a newly added reply field type has a bson_serialization_type
                      that contains 'any' that is explicitly allowed"
        command_name: newlyAddedReplyFieldTypeBsonAnyAllowed
        namespace: ignored
        cpp_name: newlyAddedReplyFieldTypeBsonAnyAllowed
        strict: true
        api_version: "1"
        reply_type: NewlyAddedBsonSerializationTypeAnyReply

    oldUnstableReplyFieldTypeChanges:
        description: "command passes when it has an old unstable reply field with incompatible type changes"
        command_name: oldUnstableReplyFieldTypeChanges
        namespace: ignored
        cpp_name: oldUnstableReplyFieldTypeChanges
        strict: true
        api_version: "1"
        reply_type: OldUnstableTypeChangesReply

    commandAllowedAnyTypes:
        description: "new command that has parameter and reply type with
                      explicitly allowed 'any' bson serialization type passes"
        command_name: commandAllowedAnyTypes
        namespace: type
        type: bsonSerializationTypeAnyAllowed
        cpp_name: commandAllowedAnyTypes
        strict: true
        api_version: "1"
        reply_type: BsonSerializationTypeAnyReply
        fields:
            anyTypeParam:
                type: bsonSerializationTypeAnyAllowed

    commandAllowedAnyTypesWithVariant:
        description: "command that has reply variant types with
                      explicitly allowed 'any' bson serialization type passes"
        command_name: commandAllowedAnyTypesWithVariant
        namespace: ignored
        cpp_name: commandAllowedAnyTypesWithVariant
        strict: true
        api_version: "1"
        reply_type: BsonSerializationTypeAnyWithVariantReply

    newParamVariantSuperset:
        description: "new command passes because its parameter type is a variant type that is
                      a superset of the old parameter variant types"
        command_name: newParamVariantSuperset
        namespace: ignored
        cpp_name: newParamVariantSuperset
        strict: true
        api_version: "1"
        reply_type: OkReply
        fields:
            variantSupersetParam:
                type: 
                    variant: [int, bool, string, array<string>]

    newParamVariantSupersetTwo:
        description: "new command passes because its parameter type is a variant type that is
                      a superset of the old parameter variant types"
        command_name: newParamVariantSupersetTwo
        namespace: ignored
        cpp_name: newParamVariantSupersetTwo
        strict: true
        api_version: "1"
        reply_type: OkReply
        fields:
            variantSupersetParam:
                type: 
                    variant: [int, string, bool, double, array<string>]

    oldParamTypeNotVariant:
        description: "new command passes because its parameter type is variant while the old
                      param type is not"
        command_name: newParamTypeNotVariant
        namespace: ignored
        cpp_name: newParamTypeNotVariant
        strict: true
        api_version: "1"
        reply_type: OkReply
        fields:
            variantParam:
                type: 
                    variant: [int, string, array<string>]

    newParamVariantRecursive:
        description: "new command passes because its param type is a variant type that is
                      compatible with the old param variant type"
        command_name: newParamVariantRecursive
        namespace: ignored
        cpp_name: newParamVariantRecursive
        strict: true
        api_version: "1"
        reply_type: OkReply
        fields:
            variantRecursiveParam:
                type: 
                    variant: [int, intStringToIntStringBool,
                              array<intStringToIntStringBool>, array<string>]

    newParamVariantStructSuperset:
        description: "new command passes because its parameter type is a variant type that is
                      a subset of the old parameter variant types"
        command_name: newParamVariantStructSuperset
        namespace: ignored
        cpp_name: newParamVariantStructSuperset
        strict: true
        api_version: "1"
        reply_type: OkReply
        fields:
            variantStructSupersetParam:
                type: 
                    variant: [int, string, NewCommandParameterStruct,
                              array<NewCommandParameterStruct>, array<string>]

    newParamVariantStructRecursive:
        description: "new command passes because its parameter type has a variant
                      struct type that is compatible with the old parameter variant
                      struct type"
        command_name: newParamVariantStructRecursive
        namespace: ignored
        cpp_name: newParamVariantStructRecursive
        strict: true
        api_version: "1"
        reply_type: OkReply
        fields:
            variantStructRecursiveParam:
                type:
                    variant: [int, string, StructCommandParameterTypeRecursive,
                              array<StructCommandParameterTypeRecursive>, array<string>]

    newCommandTypeVariantSuperset:
        description: "new command passes because its type is a variant type that is
                      a superset of the old type variant types"
        command_name: newCommandTypeVariantSuperset
        namespace: type
        type: VariantSupersetStruct
        cpp_name: newCommandTypeVariantSuperset
        strict: true
        api_version: "1"
        reply_type: OkReply

    newCommandTypeVariantSupersetTwo:
        description: "new command passes because its type is a variant type that is
                      a superset of the old command type variant types"
        command_name: newCommandTypeVariantSupersetTwo
        namespace: type
        type: VariantSupersetStructTwo
        cpp_name: newCommandTypeVariantSupersetTwo
        strict: true
        api_version: "1"
        reply_type: OkReply

    oldCommandTypeNotVariant:
        description: "new command passes because its type is variant while the old
                      type is not"
        command_name: oldCommandTypeNotVariant
        namespace: type
        type: OldTypeNotVariantStruct
        cpp_name: oldCommandTypeNotVariant
        strict: true
        api_version: "1"
        reply_type: OkReply

    newCommandTypeVariantRecursive:
        description: "new command passes because its type is a variant type that is passes
                      compatible with the old command type variant type"
        command_name: newCommandTypeVariantRecursive
        namespace: type
        type: VariantRecursiveStruct
        cpp_name: newCommandTypeVariantRecursive
        strict: true
        api_version: "1"
        reply_type: OkReply

    newCommandTypeVariantStructSuperset:
        description: "new command passes because its type is a variant type that is
                      a superset of the old command type variant types"
        command_name: newCommandTypeVariantStructSuperset
        namespace: type
        type: VariantStructSupersetStruct
        cpp_name: newCommandTypeVariantStructSuperset
        strict: true
        api_version: "1"
        reply_type: OkReply

    newCommandTypeVariantStructRecursive:
        description: "new command passes because its type has a variant
                      struct type that is compatible with the old command type variant
                      struct type"
        command_name: newCommandTypeVariantStructRecursive
        namespace: type
        type: VariantStructRecursiveStruct
        cpp_name: newCommandTypeVariantStructRecursive
        strict: true
        api_version: "1"
        reply_type: OkReply

    oldReplyFieldValidator:
        description: "new command passes because it contains a reply field that does not contain a validator
                      that is present in the old reply field"
        command_name: oldReplyFieldValidator
        namespace: ignored
        cpp_name: oldReplyFieldValidator
        strict: true
        api_version: "1"
        reply_type: OldValidatorStruct

    replyFieldValidatorsEqual:
        description: "new command passes because it contains a reply field that contains a validator
                      that is exactly equal to the old reply field validator"
        command_name: replyFieldValidatorsEqual
        namespace: ignored
        cpp_name: replyFieldValidatorsEqual
        strict: true
        api_version: "1"
        reply_type: ValidatorsEqualStruct

    simpleCheckEqual:
        description: "new command passes because its simple check is equal to
                      the old check"
        command_name: simpleCheckEqual
        namespace: ignored
        cpp_name: simpleCheckEqual
        strict: true
        api_version: "1"
        reply_type: OkReply
        access_check:
            simple:
                check: check

    simplePrivilegeEqual:
        description: "new command passes because its simple privilege is equal to
                      the old privilege"
        command_name: simplePrivilegeEqual
        namespace: ignored
        cpp_name: simplePrivilegeEqual
        strict: true
        api_version: "1"
        reply_type: OkReply
        access_check:
            simple:
                privilege:
                    resource_pattern: resourcePattern
                    action_type: [actionTypeOne, actionTypeTwo, actionTypeThree]

    newSimpleActionTypeSubset:
        description: "new command passes because its simple privilege action_type is a subset
                      of the old privilege action_type"
        command_name: newSimpleActionTypeSubset
        namespace: ignored
        cpp_name: newSimpleActionTypeSubset
        strict: true
        api_version: "1"
        reply_type: OkReply
        access_check:
            simple:
                privilege:
                    resource_pattern: resourcePattern
                    action_type: [actionTypeOne, actionTypeTwo, actionTypeThree]

    ArrayCommand:
        description: "new command will pass because the command type and the field type are of
                      ArrayType of a type that is compatible with the old command."
        command_name: arrayCommand
        namespace: type
        type: array<ArrayTypeStruct>
        cpp_name: arrayCommand
        strict: true
        api_version: "1"
        fields:
            parameterStruct:
                type: array<ArrayTypeStruct>
        reply_type: ArrayTypeStruct

    complexActionTypesSubset:
        description: "new command passes when the action types are a subset"
        command_name: complexActionTypesSubset
        namespace: ignored
        cpp_name: complexActionTypesSubset
        strict: true
        api_version: "1"
        reply_type: OkReply
        access_check:
            complex:
                - privilege:
                    resource_pattern: resourcePattern
                    action_type: [actionTypeOne, actionTypeTwo, actionTypeThree]
                - privilege:
                    resource_pattern: resourcePatternTwo
                    action_type: [actionTypeOne, actionTypeTwo]
                - check: checkOne

    complexActionTypesSubsetTwo:
        description: "new command passes when the action types are a subset"
        command_name: complexActionTypesSubsetTwo
        namespace: ignored
        cpp_name: complexActionTypesSubsetTwo
        strict: true
        api_version: "1"
        reply_type: OkReply
        access_check:
            complex:
                - privilege:
                    resource_pattern: resourcePattern
                    action_type: [actionTypeOne, actionTypeTwo]
                - check: checkOne
                - check: checkTwo
                - privilege:
                    resource_pattern: resourcePatternTwo
                    action_type: [actionTypeOne, actionTypeTwo, actionTypeThree]

    complexChecksSubset:
        description: "new command passes when the complex checks are a subset of the old checks"
        command_name: complexChecksSubset
        namespace: ignored
        cpp_name: complexChecksSubset
        strict: true
        api_version: "1"
        reply_type: OkReply
        access_check:
            complex:
                - check: checkOne
                - check: checkTwo
                - check: checkThree

    removedComplexPrivilege:
        description: "new command passes when a complex privilege is removed"
        command_name: removedComplexPrivilege
        namespace: ignored
        cpp_name: removedComplexPrivilege
        strict: true
        api_version: "1"
        reply_type: OkReply
        access_check:
            complex:
                - privilege:
                    resource_pattern: resourcePattern
                    action_type: [actionTypeOne, actionTypeTwo]
                - check: checkOne
                - privilege:
                    resource_pattern: resourcePattern
                    action_type: [actionTypeOne, actionTypeTwo, actionTypeThree]

    addedAccessCheckField:
        description: "new command passes because it adds the access_check field when the api_version is not '1'"
        command_name: addedAccessCheckField
        namespace: ignored
        cpp_name: addedAccessCheckField
        strict: true
        api_version: ""
        reply_type: OkReply
