test_kind: js_test

selector:
  roots:
  - jstests/core/**/*.js
  exclude_files:
  # These tests change the transactionLifetimeLimitSeconds server parameter which conflicts with how
  # the CheckReplDBHashInBackground hook doesn't want transactions to be reaped while it is running.
  - jstests/core/txns/abort_expired_transaction.js
  - jstests/core/txns/abort_transaction_thread_does_not_block_on_locks.js
  - jstests/core/txns/kill_op_on_txn_expiry.js
  # The set_param1.js test attempts to compare the response from running the {getParameter: "*"}
  # command multiple times, which may observe the change to the "transactionLifetimeLimitSeconds"
  # server parameter.
  - jstests/core/set_param1.js

  exclude_with_any_tags:
  - assumes_standalone_mongod

executor:
  archive:
    hooks:
      - CheckReplDBHashInBackground
      - ValidateCollectionsInBackground
      - CheckReplDBHash
      - CheckReplOplogs
      - ValidateCollections
  config:
    shell_options:
      eval: "testingReplication = true;"
      readMode: commands
  hooks:
  # The CheckReplDBHash hook waits until all operations have replicated to and have been applied
  # on the secondaries, so we run the ValidateCollections hook after it to ensure we're
  # validating the entire contents of the collection.
  - class: CheckReplDBHashInBackground
  - class: ValidateCollectionsInBackground
  - class: CheckReplOplogs
  - class: CheckReplDBHash
  - class: ValidateCollections
  - class: CleanEveryN
    n: 20
  fixture:
    class: ReplicaSetFixture
    mongod_options:
      set_parameters:
        enableTestCommands: 1
        internalQueryEnableLoggingV2OplogEntries: false
    num_nodes: 2
