# Copyright (C) 2019-present MongoDB, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the Server Side Public License, version 1,
# as published by MongoDB, Inc.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# Server Side Public License for more details.
#
# You should have received a copy of the Server Side Public License
# along with this program. If not, see
# <http://www.mongodb.com/licensing/server-side-public-license>.
#
# As a special exception, the copyright holders give permission to link the
# code of portions of this program with the OpenSSL library under certain
# conditions as described in each individual source file and distribute
# linked combinations including the program with the OpenSSL library. You
# must comply with the Server Side Public License in all respects for
# all of the code used other than as permitted herein. If you modify file(s)
# with this exception, you may extend this exception to your version of the
# file(s), but you are not obligated to do so. If you do not wish to do so,
# delete this exception statement from your version. If you delete this
# exception statement from all source files in the program, then also delete
# it in the license file.
#

global:
    cpp_namespace: "mongo"
    cpp_includes:
        - "mongo/db/matcher/matcher_type_set.h"
        - "mongo/db/matcher/schema/encrypt_schema_types.h"

imports:
    - "mongo/idl/basic_types.idl"

types:
    encryptSchemaKeyId:
        bson_serialization_type: any
        description: "A string pointing to the key id or an array UUIDs identifying a set of keys."
        cpp_type: "mongo::EncryptSchemaKeyId"
        serializer: mongo::EncryptSchemaKeyId::serializeToBSON
        deserializer: mongo::EncryptSchemaKeyId::parseFromBSON

    bsonTypeSet:
        bson_serialization_type: any
        description: "A string or array of strings representing BSONType names."
        cpp_type: "mongo::BSONTypeSet"
        serializer: mongo::BSONTypeSet::serializeToBSON
        deserializer: mongo::BSONTypeSet::parseFromBSON

enums:
    FleAlgorithm:
        description: "The algorithm used to encrypt fields for field level encryption."
        type: string
        values:
            kDeterministic: "AEAD_AES_256_CBC_HMAC_SHA_512-Deterministic"
            kRandom: "AEAD_AES_256_CBC_HMAC_SHA_512-Random"
    FleAlgorithmInt:
        description: "The algorithm used to encrypt fields for field level encryption represented
            as an unsigned integer."
        type: int
        values:
            kDeterministic: 1
            kRandom: 2

structs:
    # Maps to the encrypt keyword in JSON Schema.
    EncryptionInfo:
        description: "Represents the fields that users can specify within the encryptMetadata
            subobject in a JSON Schema."
        strict: true
        fields:
          bsonType:
            description: "Specifies the type of the to-be-encrypted value."
            type: bsonTypeSet
            optional: true
          algorithm:
            description: "The encryption algorithm to be used."
            type: FleAlgorithm
            optional: true
          keyId:
            description: "A JSONPointer to a key or an array of UUIDs identifying a set of keys."
            type: encryptSchemaKeyId
            optional: true

    # Maps to "encryptMetadata" in JSON Schema.
    EncryptionMetadata:
        description: "The fields that can be applied to children in the schema
            with the encrypt keyword."
        strict: true
        generate_comparison_operators: true
        fields:
          algorithm:
            description: "The encryption algorithm to be used."
            type: FleAlgorithm
            optional: true
          keyId:
            description: "A JSONPointer to a key or an array of UUIDs identifying a set of keys."
            type: encryptSchemaKeyId
            optional: true

    EncryptionPlaceholder:
        description: "Implements Encryption BinData (subtype 6) sub-subtype 0, the intent-to-encrypt
            mapping. Contains a value to encrypt and a description of how it should be encrypted."
        strict: true
        fields:
          a:
            description: "The encryption algorithm to be used."
            type: FleAlgorithmInt
            cpp_name: algorithm
          ki:
            description: "Used to query the key vault by _id. If omitted, ka must be specified."
            type: uuid
            cpp_name: keyId
            optional: true
          ka:
            description: "Used to query the key vault by keyAltName. If omitted,
                ki must be specified."
            type: string
            cpp_name: keyAltName
            optional: true
          v:
            description: "value to encrypt"
            type: IDLAnyType
            cpp_name: value
