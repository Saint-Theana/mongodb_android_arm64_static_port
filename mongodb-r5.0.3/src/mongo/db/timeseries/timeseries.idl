# Copyright (C) 2020-present MongoDB, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the Server Side Public License, version 1,
# as published by MongoDB, Inc.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# Server Side Public License for more details.
#
# You should have received a copy of the Server Side Public License
# along with this program. If not, see
# <http://www.mongodb.com/licensing/server-side-public-license>.
#
# As a special exception, the copyright holders give permission to link the
# code of portions of this program with the OpenSSL library under certain
# conditions as described in each individual source file and distribute
# linked combinations including the program with the OpenSSL library. You
# must comply with the Server Side Public License in all respects for
# all of the code used other than as permitted herein. If you modify file(s)
# with this exception, you may extend this exception to your version of the
# file(s), but you are not obligated to do so. If you do not wish to do so,
# delete this exception statement from your version. If you delete this
# exception statement from all source files in the program, then also delete
# it in the license file.

global:
    cpp_namespace: "mongo"

imports:
    - "mongo/idl/basic_types.idl"

server_parameters:
    "timeseriesBucketMaxCount":
        description: "Maximum number of measurements to store in a single bucket"
        set_at: [ startup ]
        cpp_vartype: "std::int32_t"
        cpp_varname: "gTimeseriesBucketMaxCount"
        default: 1000
        validator: { gte: 1 }
    "timeseriesBucketMaxSize":
        description: "Maximum size in bytes of measurements to store together in a single bucket"
        set_at: [ startup ]
        cpp_vartype: "std::int32_t"
        cpp_varname: "gTimeseriesBucketMaxSize"
        default: 128000 # 125KB
        validator: { gte: 1 }
    "timeseriesIdleBucketExpiryMemoryUsageThreshold":
        description: "The threshold for bucket catalog memory usage above which idle buckets will be
                      expired"
        set_at: [ startup ]
        cpp_vartype: "std::int32_t"
        cpp_varname: "gTimeseriesIdleBucketExpiryMemoryUsageThreshold"
        default:  104857600 # 100MB
        validator: { gte: 1 }
    "timeseriesBucketsCollectionClusterById":
        description: "When true, newly-created time-series buckets collections are clustered by _id"
        set_at: [ startup ]
        cpp_vartype: bool
        cpp_varname: gTimeseriesBucketsCollectionClusterById
        default: true

enums:
    BucketGranularity:
        description: "Describes a time-series collection's expected interval between subsequent
                      measurements"
        type: string
        values:
            Seconds: "seconds"
            Minutes: "minutes"
            Hours: "hours"

structs:
    TimeseriesOptions:
        description: "The options that define a time-series collection."
        strict: true
        fields:
            timeField:
                description: "The name of the top-level field to be used for time. Inserted 
                              documents must have this field, and the field must be of the BSON UTC
                              datetime type (0x9)"
                type: string
            metaField:
                description: "The name of the top-level field describing the series. This field is
                              used to group related data and may be of any BSON type. This may not 
                              be \"_id\" or the same as 'timeField'."
                type: string
                optional: true
            granularity:
                description: "Describes the expected interval between subsequent measurements"
                type: BucketGranularity
                default: Seconds
            bucketMaxSpanSeconds:
                description: "The maximum range of time values for a bucket, in seconds"
                type: safeInt
                optional: true
                validator: { gte: 1 }
