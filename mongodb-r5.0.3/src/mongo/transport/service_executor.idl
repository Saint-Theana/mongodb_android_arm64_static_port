# Copyright (C) 2019-present MongoDB, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the Server Side Public License, version 1,
# as published by MongoDB, Inc.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# Server Side Public License for more details.
#
# You should have received a copy of the Server Side Public License
# along with this program. If not, see
# <http://www.mongodb.com/licensing/server-side-public-license>.
#
# As a special exception, the copyright holders give permission to link the
# code of portions of this program with the OpenSSL library under certain
# conditions as described in each individual source file and distribute
# linked combinations including the program with the OpenSSL library. You
# must comply with the Server Side Public License in all respects for
# all of the code used other than as permitted herein. If you modify file(s)
# with this exception, you may extend this exception to your version of the
# file(s), but you are not obligated to do so. If you do not wish to do so,
# delete this exception statement from your version. If you delete this
# exception statement from all source files in the program, then also delete
# it in the license file.
#

global:
  cpp_namespace: "mongo::transport"
  cpp_includes:
    - "mongo/transport/service_executor.h"

server_parameters:
  initialServiceExecutorThreadingModel:
    description: >-
        Start new client connections using an executor that follows this model.
    set_at: [ startup ]
    cpp_vartype: "std::string"
    cpp_varname: "initialServiceExecutorThreadingModel"
    on_update: "ServiceExecutor::setInitialThreadingModelFromString"
    default: "dedicated"
  synchronousServiceExecutorRecursionLimit:
    description: >-
        Tasks may recurse further if their recursion depth is less than this value.
    set_at: [ startup, runtime ]
    cpp_vartype: "AtomicWord<int>"
    cpp_varname: "synchronousServiceExecutorRecursionLimit"
    default: 8

  fixedServiceExecutorRecursionLimit:
    description: >-
        Tasks may recurse further if their recursion depth is less than this value.
    set_at: [ startup, runtime ]
    cpp_vartype: "AtomicWord<int>"
    cpp_varname: "fixedServiceExecutorRecursionLimit"
    default: 8

  reservedServiceExecutorRecursionLimit:
    description: >-
        Tasks may recurse further if their recursion depth is less than this value.
    set_at: [ startup, runtime ]
    cpp_vartype: 'AtomicWord<int>'
    cpp_varname: reservedServiceExecutorRecursionLimit
    default: 8

  fixedServiceExecutorThreadLimit:
    description: >-
        The fixed service executor (thread model "borrowed") can only maintain a count of threads
        less than this value.
    set_at: [ startup ]
    cpp_vartype: "int"
    cpp_varname: "fixedServiceExecutorThreadLimit"
    default: 1000
    validator:
        gte: 10
